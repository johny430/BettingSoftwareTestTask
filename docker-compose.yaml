version: '3.9'

services:
  postgres_bet:
    image: postgres:14-alpine
    container_name: postgres_bet
    ports:
      - "5434:5433"
    environment:
      POSTGRES_PASSWORD: secret_pass
      POSTGRES_USER: bet_user
      POSTGRES_DB: bet
    volumes:
      - postgres_data_bet:/var/lib/postgresql/data
    networks:
      - app-network
    command: -p 5433
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bet_user -d bet -p 5433"]
      interval: 10s
      timeout: 5s
      retries: 5
  postgres_line:
    image: postgres:14-alpine
    container_name: postgres_line
    ports:
      - 5435:5432
    environment:
      POSTGRES_PASSWORD: secret_pass
      POSTGRES_USER: line_user
      POSTGRES_DB: line
    volumes:
      - postgres_data_line:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U line_user -d line"]
      interval: 10s
      timeout: 5s
      retries: 5
  pgadmin:
    image: dpage/pgadmin4:9
    container_name: pgadmin_bsw
    ports:
      - 5052:80
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin_data_bsw:/var/lib/pgadmin
    networks:
      - app-network
    depends_on:
      postgres_bet:
        condition: service_healthy
      postgres_line:
        condition: service_healthy
  rabbitmq:
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    restart: always
    ports: 
      - 15672:15672
      - 5672:5672
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:latest
    container_name: redis_cache
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: always
  line_provider:
    build: 
      context: ./line_provider
      dockerfile: Dockerfile
    container_name: line_provider
    restart: always
    depends_on:
      postgres_line:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    ports:
      - "8000:8000"
  bet-maker:
    build:
      context: ./bet
      dockerfile: Dockerfile
    container_name: bet-maker
    restart: always
    depends_on:
      postgres_bet:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      line_provider:
        condition: service_started
    networks:
      - app-network
    ports:
    - "8001:8001"
      
networks:
  app-network:
    driver: bridge

volumes:
  postgres_data_bet:
  postgres_data_line:
  pgadmin_data_bsw: