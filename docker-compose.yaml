#version: '3.9'
#
#services:
#  #  postgres_bet:
#  #    image: postgres:14-alpine
#  #    container_name: postgres_bet
#  #    ports:
#  #      - "5434:5433"
#  #    environment:
#  #      POSTGRES_PASSWORD: secret_pass
#  #      POSTGRES_USER: bet_user
#  #      POSTGRES_DB: bet
#  #    volumes:
#  #      - postgres_data_bet:/var/lib/postgresql/data
#  #    networks:
#  #      - app-network
#  #    command: -p 5433
#  #    healthcheck:
#  #      test: [ "CMD-SHELL", "pg_isready -U bet_user -d bet -p 5433" ]
#  #      interval: 10s
#  #      timeout: 5s
#  #      retries: 5
#
#  postgres_line:
#    image: postgres:14-alpine
#    restart: unless-stopped
#    volumes:
#      - postgres_data_line_provider:/var/lib/postgresql/data
##    environment:
##      - POSTGRES_DB=line_db
##      - POSTGRES_USER=postgres
##      - POSTGRES_PASSWORD=1234
#    env_file: line_provider/.env
#    ports:
#      - 5432:5432
#
#  rabbitmq:
#    image: rabbitmq:3.10.7-management
#    hostname: rabbitmq
#    restart: always
#    ports:
#      - 15672:15672
#      - 5672:5672
#    networks:
#      - smart_net
#    healthcheck:
#      test: [ "CMD-SHELL", "rabbitmqctl status" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#
#  redis:
#    image: redis:latest
#    container_name: redis_cache
#    ports:
#      - "6379:6379"
#    networks:
#      - smart_net
#    restart: always
#
#
#  line_provider:
#    build:
#      context: line_provider
#      dockerfile: line_provider/Dockerfile
#    container_name: line_provider
#    command: [ "python", "main.py" ]
#    depends_on:
#      postgres_line:
#        condition: service_started
#      rabbitmq:
#        condition: service_started
#    ports:
#      - "8000:8000"
#    networks:
#      - smart_net
##  bet_maker:
##    build:
##      context: bet_maker
##      dockerfile: bet_maker/Dockerfile
##    container_name: bet-maker
##    command: [ "python", "main.py" ]
##    restart: always
##    depends_on:
##      postgres_bet:
##        condition: service_healthy
##      rabbitmq:
##        condition: service_started
##      line_provider:
##        condition: service_started
##    networks:
##      - app-network
##    ports:
##      - "8001:8001"
##
##  bet_maker_consumer:
##    build:
##      context: bet_maker
##      dockerfile: bet_maker/Dockerfile
##    container_name: bet-maker-consumer
##    command: [ "python", "messaging/main.py" ]
##    restart: always
##    depends_on:
##      postgres_bet:
##        condition: service_healthy
##      rabbitmq:
##        condition: service_started
##      line_provider:
##        condition: service_started
##    networks:
##      - app-network
#
#networks:
#  smart_net:
#    driver: bridge
#    name: smart_net
#
#volumes:
#  postgres_data_bet:
#  postgres_data_line_provider:
#  pgadmin_data_bsw:

version: '3.8'

services:
  line_provider_database:
    image: postgres:alpine
    env_file: line_provider/.env
    ports:
      - "5432:5432"
    volumes:
      - line_provider_postgres_data:/var/lib/postgresql/data

  bet_maker_database:
    image: postgres:alpine
    env_file: bet_maker/.env
    ports:
      - "5433:5432"
    volumes:
      - bet_maker_postgres_data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3-management
    env_file: line_provider/.env
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  redis:
    image: redis:7
    env_file: bet_maker/.env
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  line_provider:
    build:
      context: line_provider
      dockerfile: Dockerfile
    env_file: line_provider/.env
    command: [ "python", "src/main.py" ]
    ports:
      - "8080:8080"
    depends_on:
      - line_provider_database
      - rabbitmq

  bet_maker:
    build:
      context: bet_maker
      dockerfile: Dockerfile
    env_file: bet_maker/.env
    command: [ "python", "src/main.py" ]
    ports:
      - "8090:8090"
    depends_on:
      - bet_maker_database
      - rabbitmq

volumes:
  line_provider_postgres_data:
  bet_maker_postgres_data:
  redis_data:
  rabbitmq_data: